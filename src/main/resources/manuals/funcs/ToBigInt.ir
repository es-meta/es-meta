def ToBigInt(
  argument: ESValue,
): Normal[BigInt] | Abrupt[throw] = {
  call %0 = clo<ToPrimitive>(argument, ~number~)
  let prim = [? %0]
  if (= (typeof prim) @Undefined) {
    call %1 = clo<__THROW__>("%TypeError.prototype%")
    return %1
  }
  if (= (typeof prim) @Null) {
    call %2 = clo<__THROW__>("%TypeError.prototype%")
    return %2
  }
  if (= (typeof prim) @Boolean) {
    if prim return 1n else return 0n
  }
  if (= (typeof prim) @BigInt) return prim
  if (= (typeof prim) @Number) {
    call %3 = clo<__THROW__>("%TypeError.prototype%")
    return %3
  }
  if (= (typeof prim) @String) {
    call %4 = clo<StringToBigInt>(prim)
    let n = %4
    if (= n undefined) {
      call %5 = clo<__THROW__>("%SyntaxError.prototype%")
      return %5
    }
    return n
  }
  if (= (typeof prim) @Symbol) {
    call %6 = clo<__THROW__>("%TypeError.prototype%")
    return %6
  }
  assert false
}