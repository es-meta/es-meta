def ToBigInt(
  argument: ESValue,
): Normal[BigInt] | Abrupt[throw] = {
  call %0 = clo<ToPrimitive>(argument, ~number~)
  let prim = [? %0]
  if (= (typeof prim) @Undefined) return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined)))
  if (= (typeof prim) @Null) return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined)))
  if (= (typeof prim) @Boolean) {
    if prim return 1n else return 0n
  }
  if (= (typeof prim) @BigInt) return prim
  if (= (typeof prim) @Number) return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined)))
  if (= (typeof prim) @String) {
    call %1 = clo<StringToBigInt>(prim)
    let n = %1
    if (= n undefined) return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%SyntaxError.prototype%"], "ErrorData" -> undefined)))
    return n
  }
  if (= (typeof prim) @Symbol) return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined)))
  assert false
}
