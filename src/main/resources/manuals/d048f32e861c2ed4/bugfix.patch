diff --git a/spec.html b/spec.html
index 47ad886a..403c360d 100644
--- a/spec.html
+++ b/spec.html
@@ -34650,7 +34650,7 @@ THH:mm:ss.sss
               1. Let _resultString_ be the substring of _s_ from _position_ to _nextIndex_.
               1. Set _position_ to _nextIndex_.
               1. Perform ? GeneratorYield(CreateIterResultObject(_resultString_, *false*)).
-            1. Return *undefined*.
+            1. Return NormalCompletion(*undefined*).
           1. Return CreateIteratorFromClosure(_closure_, *"%StringIteratorPrototype%"*, %StringIteratorPrototype%).
         </emu-alg>
         <p>The value of the *"name"* property of this method is *"[Symbol.iterator]"*.</p>
@@ -40667,7 +40667,7 @@ THH:mm:ss.sss
                 1. Perform ? GeneratorYield(CreateIterResultObject(_result_, *false*)).
                 1. NOTE: The number of elements in _entries_ may have increased while execution of this abstract operation was paused by Yield.
                 1. Set _numEntries_ to the number of elements in _entries_.
-            1. Return *undefined*.
+            1. Return NormalCompletion(*undefined*).
           1. Return CreateIteratorFromClosure(_closure_, *"%MapIteratorPrototype%"*, %MapIteratorPrototype%).
         </emu-alg>
       </emu-clause>
@@ -45502,7 +45502,7 @@ THH:mm:ss.sss
             1. Else,
               1. Assert: _result_.[[Type]] is ~throw~.
               1. Return ? _result_.
-            1. Return CreateIterResultObject(_resultValue_, *true*).
+            1. Return NormalCompletion(CreateIterResultObject(_resultValue_, *true*)).
           1. Set the code evaluation state of _genContext_ such that when evaluation is resumed for that execution context, _closure_ will be called with no arguments.
           1. Set _generator_.[[GeneratorContext]] to _genContext_.
           1. Set _generator_.[[GeneratorState]] to ~suspendedStart~.
@@ -45855,7 +45855,7 @@ THH:mm:ss.sss
             1. If _result_.[[Type]] is ~return~, set _result_ to NormalCompletion(_result_.[[Value]]).
             1. Perform AsyncGeneratorCompleteStep(_acGenerator_, _result_, *true*).
             1. Perform AsyncGeneratorDrainQueue(_acGenerator_).
-            1. Return *undefined*.
+            1. Return NormalCompletion(*undefined*).
           1. Set the code evaluation state of _genContext_ such that when evaluation is resumed for that execution context, _closure_ will be called with no arguments.
           1. Set _generator_.[[AsyncGeneratorContext]] to _genContext_.
           1. Set _generator_.[[AsyncGeneratorState]] to ~suspendedStart~.
@@ -46252,7 +46252,7 @@ THH:mm:ss.sss
           1. <emu-meta effects="user-code">Resume the suspended evaluation of _asyncContext_</emu-meta>. Let _result_ be the value returned by the resumed computation.
           1. Assert: When we return here, _asyncContext_ has already been removed from the execution context stack and _runningContext_ is the currently running execution context.
           1. Assert: _result_ is a normal completion with a value of ~unused~. The possible sources of this value are Await or, if the async function doesn't await anything, step <emu-xref href="#step-asyncblockstart-return-undefined"></emu-xref> above.
-          1. Return ~unused~.
+          1. Return NormalCompletion(~unused~).
         </emu-alg>
       </emu-clause>
 
